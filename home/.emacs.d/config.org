* Initialization Settings
** QoL
*** Enable line numbers
#+begin_src elisp
(setq linum-format "%4d \u2502 ")
(global-linum-mode)
#+end_src
*** Disable Startup screen and GUI elements
#+begin_src elisp
(setq inhibit-startup-message t)
#+end_src
*** Enable copy and paste
#+begin_src elisp
(setq x-select-enable-clipboard t)
#+end_src
*** Rebind M-x
#+begin_src elisp
(global-set-key (kbd "M-x") 'helm-M-x)
#+end_src
*** Fix Indentation
#+begin_src elisp
(setq-default indent-tabs-mode nil)
(setq tab-width 2)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
#+end_src

*** Turn on Auto Brackets
#+begin_src elisp
(electric-pair-mode 1) 
#+end_src

*** Disable AutoSave / Backup Files
#+begin_src elisp
(setq backup-inhibited t)
(setq auto-save-default nil)
#+end_src

** Font Settings
#+begin_src elisp
(set-face-attribute 'default nil
                    :font "Fira Code"
                    :height 110
                    :weight 'medium)
(set-face-attribute 'fixed-pitch nil
                    :font "Fira Code"
                    :height 110
                    :weight 'medium)
(set-face-attribute 'variable-pitch nil
                    :font "Fira Code"
                    :height 110
                    :weight 'medium)
#+end_src
*** All the icons font
#+begin_src elisp
(use-package all-the-icons
  :ensure t)
#+end_src
** Theme
Main theme + Modeline
#+begin_src elisp
(load-theme 'tango-dark)
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src

#+end_src

** Enable =winner-mode=
#+begin_src elisp
(winner-mode 1)
#+end_src

** Buffer-move
#+begin_src elisp
(use-package buffer-move
  :ensure t
  :config
  (global-set-key (kbd "<C-S-up>")     'buf-move-up)
  (global-set-key (kbd "<C-S-down>")   'buf-move-down)
  (global-set-key (kbd "<C-S-left>")   'buf-move-left)
  (global-set-key (kbd "<C-S-right>")  'buf-move-right)
  )
#+end_src

** Make selection region visible in terminal
#+begin_src elisp
(set-face-attribute 'region nil
                    :background "white")
(set-face-attribute 'region nil
                    :foreground "black")
#+end_src

* Custom Functions
** Open =config.org=
#+begin_src elisp
(defun my/open-config-org-file ()
  "Open this file in emacs for editing"
  (interactive)
  (find-file "~/.emacs.d/config.org"))
#+end_src
** Reindent Whole Buffer (basic bitch formatting)
#+begin_src elisp
(defun my/reindent-whole-buffer ()
  "Mark whole buffer, then indent the region. This is what i refere to as 'basic bitch formatting'"
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max) nil)))
#+end_src

** Reload config
#+begin_src elisp
(defun my/reload-config ()
  (interactive)
  (load-file "~/.emacs.d/init.el"))
#+end_src

** Open Org Directory
#+begin_src elisp
(defun my/open-org-directory ()
  "Open org directory in dired"
  (interactive)
  (dired org-directory))
#+end_src
* Org Mode
** Basic Org settings
#+begin_src elisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-directory "~/org"
      org-agenda-files '("~/Documents/org/agenda.org")
      org-default-notes-file (expand-file-name "notes.org" org-directory))
(setq org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)
#+end_src
** Org bullets
#+begin_src elisp
(use-package org-bullets
  :ensure t)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Source Block Highlighting
#+begin_src elisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+end_src

** Cleanup M-RET Behaviour
#+begin_src elisp
(setq org-blank-before-new-entry (quote ((heading . nil)
					 (plain-list-item . nil))))
#+end_src
* Snippets
#+begin_src elisp
(use-package yasnippet
  :ensure t)
(use-package yasnippet-snippets
  :ensure t)
(yas-reload-all)
(yas-global-mode 1)

(global-set-key (kbd "C-<tab>") 'yas-maybe-expand)
(global-set-key (kbd "C-TAB") 'yas-maybe-expand)
#+end_src
* Terminal
#+begin_src elisp
(use-package popper
  :ensure t
  :bind (("C-`" . popper-toggle-latest)
         ("M-`" . popper-cycle)
         ("C-M-`" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "\\*shell\\*"
          "Output\\*$"
          help-mode
          compilation-mode))
  (popper-mode +1))

(defvar th-shell-popup-buffer nil)
(defun th-shell-popup ()
  "Toggle a shell popup buffer with the current file's directory as cwd."
  (interactive)
  (unless (buffer-live-p th-shell-popup-buffer)
    (save-window-excursion (shell "*shell*"))
    (setq th-shell-popup-buffer (get-buffer "*shell*")))
  (let ((win (get-buffer-window th-shell-popup-buffer))
	(dir (file-name-directory (or (buffer-file-name)
				      ;; dired
				      dired-directory
				      ;; use HOME
				      "~/"))))
    (if win
	(quit-window nil win)
      (pop-to-buffer th-shell-popup-buffer nil t)
      (comint-send-string nil (concat "cd " dir "\n")))))
#+end_src

* Projectile
#+begin_src elisp
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode 1))
#+end_src
* Which key
#+begin_src elisp

(use-package which-key
  :ensure t
  :config
  (which-key-setup-side-window-bottom)
  (which-key-mode))

#+end_src

* Helm
#+begin_src elisp
(use-package helm
  :ensure t
  :config
  (helm-mode 1))
(use-package helm-projectile
  :ensure t
  :config
  (helm-projectile-on))
#+end_src
* Neotree
** Install Neotree
#+begin_src elisp
(defcustom neo-window-width 25
  "*specifies width of neotree window."
  :type 'integer
  :group 'neotree)

(use-package neotree
  :ensure t
  :config
  (setq neo-smart-open t
	neo-window-width 30
	neo-theme (if(display-graphic-p) 'icons 'arrow)
	inhibit-compacting-font-caches t
	projectile-switch-project-action 'neotree-projectile-action)
  (add-hook 'neo-after-create-hoook
	    #'(lambda (_)
		(width-current-buffer (get-buffer neo-buffer-name)
				      (setq truncate-lines t)
				      (setq word-wrap nil)
				      (make-local-variable 'auto-hscroll-mode)
				      (setq auto-hscroll-mode nil)))))
(setq-default neo-show-hidden-files t)
#+end_src

** Evil compatibility for neotree
Setup some overrides for neotree to work better with evil mode
#+begin_src elisp
(add-hook 'neotree-mode-hook
          (lambda ()
            (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
            (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
            (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
            (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
            (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
            (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
            (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
            (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
            (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)))
#+end_src
* Magit
** Install magit
#+begin_src elisp
(use-package magit
  :ensure t)
#+end_src
* Company Mode
#+begin_src elisp
(use-package company
  :ensure t)
(add-hook 'after-init-hook 'global-company-mode)

(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode))
#+end_src

* Evil Mode
** Evil mode + Evil Collection
#+begin_src elisp
(use-package evil
  :ensure t
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))
(use-package evil-collection
  :ensure t
  :after evil
  :config
  (evil-collection-init))
(use-package evil-tutor
  :ensure t)
#+end_src
** Evil Nerd Commenter
#+begin_src elisp
(use-package evil-nerd-commenter
  :ensure t
  :config
  (global-set-key (kbd "M-;") 'evilnc-comment-or-uncomment-lines)
  (global-set-key (kbd "C-c l") 'evilnc-quick-comment-or-uncomment-to-the-line)
  (global-set-key (kbd "C-c c") 'evilnc-copy-and-comment-lines)
  (global-set-key (kbd "C-c p") 'evilnc-comment-or-uncomment-paragraphs))
#+end_src

** General.el keybindings
#+begin_src elisp
(use-package general
  :ensure t
  :config
  (general-evil-setup t))
#+end_src
   
#+begin_src elisp
(nvmap :prefix "SPC"
  ;; Window split
  "w c" 'evil-window-delete
  "w n" 'evil-window-new
  "w s" 'evil-window-split
  "w v" 'evil-window-vsplit
  ;; Window Motion
  "w h" 'evil-window-left
  "w j" 'evil-window-down
  "w k" 'evil-window-up
  "w l" 'evil-window-right
  ;; winner mode
  "w <left>" 'winner-undo
  "w <right>" 'winner-redo
  ;; Projectile
  "p p" 'helm-projectile-switch-project
  "p f" 'helm-projectile-find-file
  "p g" 'helm-projectile-grep
  ;; Files / Directories
  "f f" 'helm-find-files
  "f d" 'helm-find
  "f c" 'my/open-config-org-file
  "f o" 'my/open-org-directory
  ;; Toggle
  "t t" 'neotree-toggle
  "t o" 'th-shell-popup
  ;; Magit
  "g g" 'magit-status
  "g p" 'magit-dispatch
  ;; Misc.
  "x i" 'my/reindent-whole-buffer
  "x r" 'my/reload-config)
#+end_src
