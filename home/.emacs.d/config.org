* QoL settings
This section is simple bits and pieces that make emacs nicer.
** Enable line numbers
#+begin_src elisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'text-mode-hook 'display-line-numbers-mode)
#+end_src
** Disable Startup screen and GUI elements
#+begin_src elisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src
** Enable copy and paste
#+begin_src elisp
(setq x-select-enable-clipboard t)
#+end_src
** Theme
#+begin_src elisp
(use-package gruvbox-theme
  :ensure t)
(load-theme 'gruvbox-dark-soft t)
#+end_src
** Enable =winner-mode=
#+begin_src elisp
(winner-mode 1)
#+end_src
** Rebind M-x
#+begin_src elisp
(global-set-key (kbd "M-x") 'helm-M-x)
#+end_src
* Org Mode
** Basic Org settings
#+begin_src elisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-directory "~/Documents/org"
      org-agenda-files '("~/Documents/org/agenda.org")
      org-default-notes-file (expand-file-name "notes.org" org-directory))
(setq org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)
#+end_src
** Org bullets
#+begin_src elisp
(use-package org-bullets
  :ensure t)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Source Block Highlighting
#+begin_src elisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+end_src

** Cleanup M-RET Behaviour
#+begin_src elisp
(setq org-blank-before-new-entry (quote ((heading . nil)
					 (plain-list-item . nil))))
#+end_src
* Font Settings
#+begin_src elisp
(set-face-attribute 'default nil
		    :font "Fira Code"
		    :height 110
		    :weight 'medium)
(set-face-attribute 'fixed-pitch nil
		    :font "Fira Code"
		    :height 110
		    :weight 'medium)
#+end_src
** Zoom in/out
#+begin_src elisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src
** All the icons font
#+begin_src elisp
(use-package all-the-icons
  :ensure t)
#+end_src
* Snippets
#+begin_src elisp
(use-package yasnippet
  :ensure t)
(use-package yasnippet-snippets
  :ensure t)
(yas-reload-all)
(yas-global-mode 1)

(global-set-key (kbd "C-<tab>") 'yas-maybe-expand)
(global-set-key (kbd "C-TAB") 'yas-maybe-expand)
#+end_src
* Projectile
#+begin_src elisp
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode 1))
#+end_src
* Helm
#+begin_src elisp
(use-package helm
  :ensure t
  :config
  (helm-mode 1))
(use-package helm-projectile
  :ensure t
  :config
  (helm-projectile-on))
#+end_src
* Neotree
** Install Neotree
#+begin_src elisp
(defcustom neo-window-width 25
"*specifies width of neotree window."
  :type 'integer
  :group 'neotree)

(use-package neotree
  :ensure t
  :config
  (setq neo-smart-open t
	neo-window-width 30
	neo-theme (if(display-graphic-p) 'icons 'arrow)
	inhibit-compacting-font-caches t
	projectile-switch-project-action 'neotree-projectile-action)
  (add-hook 'neo-after-create-hoook
	    #'(lambda (_)
		(width-current-buffer (get-buffer neo-buffer-name)
				      (setq truncate-lines t)
				      (setq word-wrap nil)
				      (make-local-variable 'auto-hscroll-mode)
				      (setq auto-hscroll-mode nil)))))
(setq-default neo-show-hidden-files t)
#+end_src

** Evil compatibility for neotree
Setup some overrides for neotree to work better with evil mode
#+begin_src elisp
(add-hook 'neotree-mode-hook
          (lambda ()
            (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
            (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
            (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
            (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
            (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
            (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
            (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
            (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
            (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)))
#+end_src
* Magit
** Install magit
#+begin_src elisp
(use-package magit
    :ensure t)
#+end_src
* Evil Mode
** Evil mode + Evil Collection
#+begin_src elisp
(use-package evil
  :ensure t
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))
(use-package evil-collection
  :ensure t
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
(use-package evil-tutor
  :ensure t)
#+end_src
** General.el keybindings
#+begin_src elisp
(use-package general
  :ensure t
  :config
  (general-evil-setup t))
#+end_src
   
#+begin_src elisp
(nvmap :prefix "SPC"
  ;; Window split
  "w c" 'evil-window-delete
  "w n" 'evil-window-new
  "w s" 'evil-window-split
  "w v" 'evil-window-vsplit
  ;; Window Motion
  "w h" 'evil-window-left
  "w j" 'evil-window-down
  "w k" 'evil-window-up
  "w l" 'evil-window-right
  ;; winner mode
  "w <left>" 'winner-undo
  "w <right>" 'winner-redo
  ;; Projectile
  "p p" 'helm-projectile-switch-project
  "p f" 'helm-projectile-find-file
  "p g" 'helm-projectile-grep
  ;; Files / Directories
  "f f" 'helm-find-files
  "f d" 'helm-find
  "f c" '(find-file "~/.emacs.d/config.org")
  ;; Neotree
  "t t" 'neotree-toggle
  "t d" 'neotree-dir
  ;; Magit
  "g g" 'magit-dispatch-popup)
#+end_src


